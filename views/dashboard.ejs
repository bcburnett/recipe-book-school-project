<h1 class="mt-4">Dashboard</h1>
<p class="lead mb-3" id="welcomeP" data-name="<%= user.name %>">Welcome <%= user.name %></p>
<div id="chatdiv" >
<% for(post of posts){ %>
  <p><%= post %></p>
<%}%>
</div>
<br>
<input type="text" id="chatInput">
<button id="sendhello">Send Hello</button>
<br>
<button id="postCreate">create post</button> <button id="room2">room2</button>

<div id="postFormDiv"></div>
<div id="postsDiv"></div>

<a href="/users/logout" class="btn btn-secondary">Logout</a>
<script>

let socket = io.connect('/')
const sendhello = document.querySelector('#sendhello')
const welcomeP = document.querySelector('#welcomeP').getAttribute('data-name')
const chatInput = document.querySelector('#chatInput')
const chatDiv = document.getElementById('chatdiv')
const postFormDiv = document.getElementById('postFormDiv')
const postcreate = document.getElementById('postCreate')
const postDiv = document.getElementById('postsDiv')

function doForm() {


    $.FroalaEditor.DefineIcon('insertH1', {NAME: 'h1'});
    $.FroalaEditor.RegisterCommand('insertH1', {
      title: 'H1',
      focus: true,
      undo: true,
      refreshAfterCallback: true,
      callback: function () {
        this.html.insert('<h1></h1>');
        this.undo.saveStep();
      }
    });

  $.FroalaEditor.DefineIcon('insertH2', {NAME: 'h2'});
    $.FroalaEditor.RegisterCommand('insertH2', {
      title: 'H2',
      focus: true,
      undo: true,
      refreshAfterCallback: true,
      callback: function () {
        this.html.insert('<h2></h2>');
        this.undo.saveStep();
      }
    });

        $.FroalaEditor.DefineIcon('insertH3', {NAME: 'h3'});
    $.FroalaEditor.RegisterCommand('insertH3', {
      title: 'H3',
      focus: true,
      undo: true,
      refreshAfterCallback: true,
      callback: function () {
        this.html.insert('<h3></h3>');
        this.undo.saveStep();
      }
    });

    $.FroalaEditor.DefineIcon('insertlist', {NAME: 'list-ul'});
    $.FroalaEditor.RegisterCommand('insertlist', {
      title: 'UL',
      focus: true,
      undo: true,
      refreshAfterCallback: true,
      callback: function () {
        this.html.insert('<ul></ul>');
        this.undo.saveStep();
      }
    });

$.FroalaEditor.DefineIcon('insertlistol', {NAME: 'list-ol'});
$.FroalaEditor.RegisterCommand('insertlistol', {
  title: 'OL',
  focus: true,
  undo: true,
  refreshAfterCallback: true,
  callback: function () {
    this.html.insert('<ol></ol>');
    this.undo.saveStep();
  }
});

$.FroalaEditor.DefineIcon('insertP', {NAME: 'paragraph'});
$.FroalaEditor.RegisterCommand('insertP', {
  title: 'P',
  focus: true,
  undo: true,
  refreshAfterCallback: true,
  callback: function () {
    this.html.insert('<p></p>');
    this.undo.saveStep();
  }
});
    if (!$('div#froala-editor').data('froala.editor')) {
      $('div#froala-editor').froalaEditor({
        colors: [
'#15E67F', '#E3DE8C', '#D8A076', '#D83762', '#76B6D8', 'REMOVE',
'#1C7A90', '#249CB8', '#4ABED9', '#FBD75B', '#FBE571', '#FFFFFF'
],
toolbarButtons: [
'undo', 'redo' , '|', 'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript',
 'outdent', 'indent', 'clearFormatting', 'insertTable', 'html','insertlistol','insertlist','insertH1','insertH2','insertH3','insertP'

      ],
      iconsTemplate: 'font_awesome_5'
      });
    }
  const postText = document.querySelector("#postText"),
    postLink = document.querySelector("#postLink"),
    postTitle = document.querySelector("#postTitle"),
    postImage = document.querySelector("#postImage"),
    postContent = document.querySelector("#postContent"),
    postSubmit = document.querySelector("#postSubmit"),
    postDisplay = document.querySelector("#postDisplay"),
    postFormDiv = document.querySelector("#postFormDiv")
  postImage.onchange = e => readURL(postImage);

  postSubmit.onclick = (e)=>{
const elem = document.createElement('canvas');
elem.width = postDisplay.clientWidth;
elem.height = postDisplay.clientHeight;
const ctx = elem.getContext('2d')
ctx.drawImage(postDisplay, 0, 0, postDisplay.clientWidth, postDisplay.clientHeight);
const data = ctx.canvas.toDataURL();
    const responseObject={
      "text":postText.value,
      "link":postLink.value,
      "title": postTitle.value,
      "image":data,
      "content":$('div#froala-editor').froalaEditor('html.get')
    }
    console.log(responseObject)
      socket.emit("newPost",responseObject)
      if ($('div#froala-editor').data('froala.editor')) {
      $('div#froala-editor').froalaEditor('destroy');
    }

    postFormDiv.innerHTML = ''
  }

  function readURL(input) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function(e) {
        postDisplay.setAttribute("src", e.target.result);
      };
      reader.readAsDataURL(input.files[0]);
    }
  }
}

postcreate.addEventListener('click',e=>{
  socket.emit('getPostForm')

})
sendhello.addEventListener('click',e=>{
  console.log(chatInput.value)
    const content = welcomeP + " says " + chatInput.value
    socket.emit('hello',content)
  })


    socket.on('hello', data => chatDiv.innerHTML +=`<p> ${data} </p>`)

    socket.on('chat', data => chatDiv.innerHTML +=`<p> ${data} </p>`)

    socket.on('sendPostForm', data =>{
      postFormDiv.innerHTML = data
      setTimeout(() => {
        doForm()
      }, 0);

    })

    socket.on('newPost', data =>{
      if(typeof(data)!== 'string')return
      console.log(data)
      postDiv.innerHTML += data
    })
    socket.emit('loadPosts')
</script>


